<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Louis Tiao</title><link href="http://ltiao.github.io/" rel="alternate"></link><link href="http://ltiao.github.io/feeds/python.atom.xml" rel="self"></link><id>http://ltiao.github.io/</id><updated>2015-02-05T20:00:00+01:00</updated><entry><title>Upgrading all outdated pip packages</title><link href="http://ltiao.github.io/upgrading-all-outdated-pip-packages.html" rel="alternate"></link><updated>2015-02-05T20:00:00+01:00</updated><author><name>Louis Tiao</name></author><id>tag:ltiao.github.io,2015-02-05:upgrading-all-outdated-pip-packages.html</id><summary type="html">&lt;p&gt;Simply execute:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip list --outdated | cut -d' ' -f1 | xargs pip install --upgrade
&lt;/pre&gt;
&lt;p&gt;for versions of &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; that has the &lt;tt class="docutils literal"&gt;list&lt;/tt&gt; command, which I believe
is 1.3+.&lt;/p&gt;
</summary><category term="pip"></category><category term="python"></category></entry><entry><title>Generate PDFs from Pelican Articles</title><link href="http://ltiao.github.io/generate-pdfs-from-pelican-articles.html" rel="alternate"></link><updated>2015-01-28T00:00:00+01:00</updated><author><name>Louis Tiao</name></author><id>tag:ltiao.github.io,2015-01-26:generate-pdfs-from-pelican-articles.html</id><summary type="html">&lt;p&gt;As of mid-2013, Pelican still advertised PDF generation of articles/pages
as one of its &lt;a class="reference external" href="https://github.com/getpelican/pelican/blob/8be7c0dbae5bd094379d74fd47acb41a56f18afd/docs/index.rst#features"&gt;features&lt;/a&gt;. However, the &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/changelog.html#id3"&gt;change log&lt;/a&gt; indicates that this
is no longer a core feature and has since become a Pelican plugin as of
version 3.3.0 (2013-09-24), see &lt;a class="reference external" href="https://github.com/getpelican/pelican/issues/1009"&gt;issue&lt;/a&gt; for further discussion. Therefore, it was
rather confounding to find the setting &lt;tt class="docutils literal"&gt;PDF_GENERATOR&lt;/tt&gt; to be listed in the
&lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/settings.html#example-settings"&gt;examples settings&lt;/a&gt; of version 3.5.0, and of course, to no one's surprise,
adding the setting &lt;tt class="docutils literal"&gt;PDF_GENERATOR=True&lt;/tt&gt; isn't going to do anything.&lt;/p&gt;
&lt;p&gt;If you have used &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/plugins.html"&gt;Pelican plugins&lt;/a&gt; before, then the solution should be obvious.
Simply install the &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; plugin from &lt;a class="reference external" href="http://docs.getpelican.com/en/3.5.0/plugins.html"&gt;Pelican plugins&lt;/a&gt;. I personally
prefer to keep all plugins (and themes) in the &lt;tt class="docutils literal"&gt;&amp;lt;pelican_site_root&amp;gt;&lt;/tt&gt; directory,
on the same level as the &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; settings file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd &amp;lt;pelican_site_root&amp;gt;
$ mkdir plugins
$ git clone https://github.com/getpelican/pelican-plugins.git plugins
&lt;/pre&gt;
&lt;p&gt;Optionally, you can also add the repository as a submodule:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git submodule add https://github.com/getpelican/pelican-plugins.git plugins
&lt;/pre&gt;
&lt;p&gt;or clone it anywhere else you like for that matter.&lt;/p&gt;
&lt;p&gt;Lastly, you simply need to add &lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;PLUGIN_PATHS&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt;
to &lt;tt class="docutils literal"&gt;PLUGINS&lt;/tt&gt;. The former will temporarily add &lt;tt class="docutils literal"&gt;PLUGIN_PATHS&lt;/tt&gt; to your
system path so that the latter is importable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLUGIN_PATHS = ['plugins']
PLUGINS = ['pdf']
&lt;/pre&gt;
&lt;p&gt;When you run &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;make html&lt;/tt&gt;), the generated PDFs of your articles
will appear in the &lt;tt class="docutils literal"&gt;pdf&lt;/tt&gt; directory of the output directory, named according
to the article slug with the &lt;tt class="docutils literal"&gt;.pdf&lt;/tt&gt; extension.&lt;/p&gt;
&lt;p&gt;In my opinion, the generated PDFs aren't exactly terrific, and the plugin could
do with a little bit more work. Download this article as a PDF to see what I
mean (how meta!)&lt;/p&gt;
&lt;!-- Download the `PDF of this article`_ to see what I mean (how meta!) --&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If you happen to be using the &lt;tt class="docutils literal"&gt;notmyidea&lt;/tt&gt; theme, a link &lt;em&gt;get the pdf&lt;/em&gt;
will appear by simply adding &lt;tt class="docutils literal"&gt;PDF_PROCESSOR=True&lt;/tt&gt; to your settings
(as of &lt;a class="reference external" href="https://github.com/getpelican/pelican/blob/a7ca52dee05819be269b95556da01f965d107a50/pelican/themes/notmyidea/templates/taglist.html"&gt;commit a7ca52&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;!-- .. _PDF of this article: /pdf/generate-pdfs-from-pelican-articles.pdf --&gt;
</summary><category term="pelican"></category><category term="pdf"></category></entry></feed>